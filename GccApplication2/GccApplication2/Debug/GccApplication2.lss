
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000d92  00000e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002338  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d41  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001348  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00005480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000836  00000000  00000000  000057f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011a4  00000000  00000000  00006026  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <application_initialize>:
		
}

void application_initialize(void)
{
	LCD_init_8bit();
  82:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_init_8bit>
	servo_motor_init();
  86:	0e 94 bf 02 	call	0x57e	; 0x57e <servo_motor_init>
	flame_sensor_intialize();
  8a:	0e 94 ac 01 	call	0x358	; 0x358 <flame_sensor_intialize>
	ir_sensor_intialize();
  8e:	0e 94 b5 01 	call	0x36a	; 0x36a <ir_sensor_intialize>
	BUZZER_init();
  92:	0e 94 9d 01 	call	0x33a	; 0x33a <BUZZER_init>
	Ultra_Sonic_Init();
  96:	0e 94 08 03 	call	0x610	; 0x610 <Ultra_Sonic_Init>
  9a:	08 95       	ret

0000009c <main>:
#define FLAME_EMERGANCY 0x32
#define Threshold_distance 20
void application_initialize(void);

int main(void)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	6b 97       	sbiw	r28, 0x1b	; 27
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	application_initialize();
  b0:	0e 94 41 00 	call	0x82	; 0x82 <application_initialize>
	uint8 customChar[] = {
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	e0 e6       	ldi	r30, 0x60	; 96
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x22>
		0x0E,
		0x00,
		0x0E,
		0x00
	};
	uint8 customChar_1[] = {
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	e8 e6       	ldi	r30, 0x68	; 104
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	de 01       	movw	r26, r28
  ce:	19 96       	adiw	r26, 0x09	; 9
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x34>
		0x0E,
		0x0E,
		0x0E
	};
	
	uint8 customChar_2[] = {
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	e0 e7       	ldi	r30, 0x70	; 112
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	de 01       	movw	r26, r28
  e0:	51 96       	adiw	r26, 0x11	; 17
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x46>
	};
	uint8 full_cap_key = 0;
	uint8 index_buzzer = 0;
	uint8 lcd_cars_present = 0;
	uint8 lcd_cars_capacity = 9;
	volatile uint8 v_digital_ir = 0;
  ea:	19 8e       	std	Y+25, r1	; 0x19
	volatile uint8 v_digital_ir_1 = 0;
  ec:	1a 8e       	std	Y+26, r1	; 0x1a
	volatile uint8 v_digital_flame = 0;	
  ee:	1b 8e       	std	Y+27, r1	; 0x1b
	LCD_set_cursor_8bit(1,1);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
	LCD_SEND_DATA_STRING((uint8*)"capacity = ",MODE_8BIT);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	88 e7       	ldi	r24, 0x78	; 120
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
	LCD_set_cursor_8bit(2,1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
	LCD_SEND_DATA_STRING((uint8*)"car inside = ",MODE_8BIT);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
		0x0E,
		0x04
	};
	uint8 full_cap_key = 0;
	uint8 index_buzzer = 0;
	uint8 lcd_cars_present = 0;
 114:	00 e0       	ldi	r16, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x7e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x84>
 120:	00 00       	nop
	LCD_SEND_DATA_STRING((uint8*)"car inside = ",MODE_8BIT);
    while (1) 
    {	
		//check_value_btn_res = BUTTON_pressed(BUTTON_RESET);
		_delay_ms(10);
		v_digital_flame = get_flame_value();
 122:	0e 94 b1 01 	call	0x362	; 0x362 <get_flame_value>
 126:	8b 8f       	std	Y+27, r24	; 0x1b
		v_digital_ir    = get_ir_value(IR_OUTPUT);
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	0e 94 be 01 	call	0x37c	; 0x37c <get_ir_value>
 12e:	89 8f       	std	Y+25, r24	; 0x19
		v_digital_ir_1  = get_ir_value(IR_OUTPUT_1);
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	0e 94 be 01 	call	0x37c	; 0x37c <get_ir_value>
 136:	8a 8f       	std	Y+26, r24	; 0x1a
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0xa0>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xa6>
 142:	00 00       	nop
		_delay_ms(10);
		
		
		//========================== LCD ====================================
		LCD_set_cursor_8bit(1,11);
 144:	6b e0       	ldi	r22, 0x0B	; 11
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
		LCD_SEND_DATA_INT(lcd_cars_capacity,MODE_8BIT);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_SEND_DATA_INT>
		LCD_set_cursor_8bit(2,13);
 154:	6d e0       	ldi	r22, 0x0D	; 13
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
		LCD_SEND_DATA_INT(lcd_cars_present,MODE_8BIT);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 2f       	mov	r24, r16
 160:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_SEND_DATA_INT>
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	21 ee       	ldi	r18, 0xE1	; 225
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xce>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xd8>
 174:	00 00       	nop
		_delay_ms(100);
		//===================================================================
		//========================== IR SENSOR ==============================
		if ( v_digital_ir == LOW )
 176:	89 8d       	ldd	r24, Y+25	; 0x19
 178:	81 11       	cpse	r24, r1
 17a:	42 c0       	rjmp	.+132    	; 0x200 <__EEPROM_REGION_LENGTH__>
		{
			if(0 != lcd_cars_present)
 17c:	00 23       	and	r16, r16
 17e:	99 f0       	breq	.+38     	; 0x1a6 <main+0x10a>
			{
				lcd_cars_present--;
 180:	01 50       	subi	r16, 0x01	; 1
				lcd_8bit_send_custom_char(2,16,customChar_2,0);
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	ae 01       	movw	r20, r28
 186:	4f 5e       	subi	r20, 0xEF	; 239
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	60 e1       	ldi	r22, 0x10	; 16
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <lcd_8bit_send_custom_char>
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	2b e7       	ldi	r18, 0x7B	; 123
 196:	82 e9       	ldi	r24, 0x92	; 146
 198:	91 50       	subi	r25, 0x01	; 1
 19a:	20 40       	sbci	r18, 0x00	; 0
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0xfc>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x106>
 1a2:	00 00       	nop
 1a4:	2d c0       	rjmp	.+90     	; 0x200 <__EEPROM_REGION_LENGTH__>
				_delay_ms(3000);
				
			}
			else
			{
				LCD_CLEAR_8BIT();
 1a6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
				LCD_SEND_DATA_STRING((uint8*)"NO CAR INSIDE ",MODE_8BIT);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	82 e9       	ldi	r24, 0x92	; 146
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
				LCD_set_cursor_8bit(2,1);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
				LCD_SEND_DATA_STRING((uint8*)"THE GARGAE",MODE_8BIT);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	81 ea       	ldi	r24, 0xA1	; 161
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	2d e3       	ldi	r18, 0x3D	; 61
 1ca:	89 e4       	ldi	r24, 0x49	; 73
 1cc:	91 50       	subi	r25, 0x01	; 1
 1ce:	20 40       	sbci	r18, 0x00	; 0
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x130>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x13a>
 1d6:	00 00       	nop
				_delay_ms(1500);
				LCD_CLEAR_8BIT();
 1d8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
				LCD_set_cursor_8bit(1,1);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
				LCD_SEND_DATA_STRING((uint8*)"capacity = ",MODE_8BIT);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	88 e7       	ldi	r24, 0x78	; 120
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
				LCD_set_cursor_8bit(2,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
				LCD_SEND_DATA_STRING((uint8*)"car inside = ",MODE_8BIT);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	84 e8       	ldi	r24, 0x84	; 132
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
			
		}
		//=================================================================
		
		//========================== Flame sensor==============================
		if(v_digital_flame == LOW)
 200:	8b 8d       	ldd	r24, Y+27	; 0x1b
 202:	81 11       	cpse	r24, r1
 204:	47 c0       	rjmp	.+142    	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
		{
			LCD_CLEAR_8BIT();
 206:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
			LCD_SEND_DATA_STRING((uint8*)" Alert",MODE_8BIT);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8c ea       	ldi	r24, 0xAC	; 172
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
			lcd_8bit_send_custom_char(2,16,customChar,0);
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	ae 01       	movw	r20, r28
 218:	4f 5f       	subi	r20, 0xFF	; 255
 21a:	5f 4f       	sbci	r21, 0xFF	; 255
 21c:	60 e1       	ldi	r22, 0x10	; 16
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <lcd_8bit_send_custom_char>
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	2d e3       	ldi	r18, 0x3D	; 61
 228:	89 e4       	ldi	r24, 0x49	; 73
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 234:	00 00       	nop
			_delay_ms(1500);
			for(index_buzzer = 0;index_buzzer<10;index_buzzer++)
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	0e c0       	rjmp	.+28     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
			{
				BUZZER_on();
 23a:	0e 94 a2 01 	call	0x344	; 0x344 <BUZZER_on>
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	20 e7       	ldi	r18, 0x70	; 112
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	91 50       	subi	r25, 0x01	; 1
 246:	20 40       	sbci	r18, 0x00	; 0
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
				_delay_ms(50);
				BUZZER_off();
 250:	0e 94 a7 01 	call	0x34e	; 0x34e <BUZZER_off>
		{
			LCD_CLEAR_8BIT();
			LCD_SEND_DATA_STRING((uint8*)" Alert",MODE_8BIT);
			lcd_8bit_send_custom_char(2,16,customChar,0);
			_delay_ms(1500);
			for(index_buzzer = 0;index_buzzer<10;index_buzzer++)
 254:	1f 5f       	subi	r17, 0xFF	; 255
 256:	1a 30       	cpi	r17, 0x0A	; 10
 258:	80 f3       	brcs	.-32     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 25a:	9f ef       	ldi	r25, 0xFF	; 255
 25c:	21 ee       	ldi	r18, 0xE1	; 225
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	91 50       	subi	r25, 0x01	; 1
 262:	20 40       	sbci	r18, 0x00	; 0
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 268:	00 c0       	rjmp	.+0      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 26a:	00 00       	nop
				BUZZER_on();
				_delay_ms(50);
				BUZZER_off();
			}
			_delay_ms(100);
			LCD_CLEAR_8BIT();
 26c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
			LCD_set_cursor_8bit(1,1);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
			LCD_SEND_DATA_STRING((uint8*)"capacity = ",MODE_8BIT);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	88 e7       	ldi	r24, 0x78	; 120
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
			LCD_set_cursor_8bit(2,1);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
			LCD_SEND_DATA_STRING((uint8*)"car inside = ",MODE_8BIT);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	84 e8       	ldi	r24, 0x84	; 132
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
			
		}
		//============================================================================
		//========================== UART  COMMUNICATION==============================
		
		if((ENTRY_DOOR_QR == v_digital_ir_1))
 294:	8a 8d       	ldd	r24, Y+26	; 0x1a
 296:	81 11       	cpse	r24, r1
 298:	3e cf       	rjmp	.-388    	; 0x116 <main+0x7a>
		{
			servo_motor_degree(motor_1,ON_SERVO_MOTOR);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	0e 94 c8 02 	call	0x590	; 0x590 <servo_motor_degree>
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	23 e2       	ldi	r18, 0x23	; 35
 2a6:	84 ef       	ldi	r24, 0xF4	; 244
 2a8:	91 50       	subi	r25, 0x01	; 1
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 2b2:	00 00       	nop
			_delay_ms(5000);
			servo_motor_degree(motor_1,OFF_SERVO_MOTOR);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	0e 94 c8 02 	call	0x590	; 0x590 <servo_motor_degree>
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	23 e2       	ldi	r18, 0x23	; 35
 2c0:	84 ef       	ldi	r24, 0xF4	; 244
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2cc:	00 00       	nop
			_delay_ms(5000);
			if(lcd_cars_present != lcd_cars_capacity)
 2ce:	09 30       	cpi	r16, 0x09	; 9
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
			{
				lcd_cars_present++;
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
				lcd_8bit_send_custom_char(2,16,customChar_1,1);
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	ae 01       	movw	r20, r28
 2d8:	47 5f       	subi	r20, 0xF7	; 247
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	60 e1       	ldi	r22, 0x10	; 16
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <lcd_8bit_send_custom_char>
 2e4:	18 cf       	rjmp	.-464    	; 0x116 <main+0x7a>

			}
			else
			{
				LCD_CLEAR_8BIT();
 2e6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
				while(lcd_cars_present== 9 && v_digital_ir !=0)
 2ea:	10 e0       	ldi	r17, 0x00	; 0
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <__EEPROM_REGION_LENGTH__+0x106>
				{
					v_digital_ir = get_ir_value(IR_OUTPUT);
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	0e 94 be 01 	call	0x37c	; 0x37c <get_ir_value>
 2f4:	89 8f       	std	Y+25, r24	; 0x19
					if(full_cap_key != 1)
 2f6:	11 30       	cpi	r17, 0x01	; 1
 2f8:	31 f0       	breq	.+12     	; 0x306 <__EEPROM_REGION_LENGTH__+0x106>
					{
						full_cap_key = 1;
						LCD_SEND_DATA_STRING((uint8*)"GARAGE IS FULL",MODE_8BIT);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	83 eb       	ldi	r24, 0xB3	; 179
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
				while(lcd_cars_present== 9 && v_digital_ir !=0)
				{
					v_digital_ir = get_ir_value(IR_OUTPUT);
					if(full_cap_key != 1)
					{
						full_cap_key = 1;
 304:	11 e0       	ldi	r17, 0x01	; 1

			}
			else
			{
				LCD_CLEAR_8BIT();
				while(lcd_cars_present== 9 && v_digital_ir !=0)
 306:	09 30       	cpi	r16, 0x09	; 9
 308:	19 f4       	brne	.+6      	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
 30a:	89 8d       	ldd	r24, Y+25	; 0x19
 30c:	81 11       	cpse	r24, r1
 30e:	ef cf       	rjmp	.-34     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
						LCD_SEND_DATA_STRING((uint8*)"GARAGE IS FULL",MODE_8BIT);
					}
					
				}
				full_cap_key = 0;
				LCD_CLEAR_8BIT();
 310:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_CLEAR_8BIT>
				LCD_set_cursor_8bit(1,1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
				LCD_SEND_DATA_STRING((uint8*)"capacity = ",MODE_8BIT);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	88 e7       	ldi	r24, 0x78	; 120
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
				LCD_set_cursor_8bit(2,1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
				LCD_SEND_DATA_STRING((uint8*)"car inside = ",MODE_8BIT);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	84 e8       	ldi	r24, 0x84	; 132
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_SEND_DATA_STRING>
 338:	ee ce       	rjmp	.-548    	; 0x116 <main+0x7a>

0000033a <BUZZER_init>:
#include "BUZZER_INTERFACEh.h"


void BUZZER_init()
{
	pinMode(BUZZER_PIN,OUTPUT);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	81 e2       	ldi	r24, 0x21	; 33
 33e:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 342:	08 95       	ret

00000344 <BUZZER_on>:
}
void BUZZER_on()
{
	digitalWrite(BUZZER_PIN,HIGH);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	81 e2       	ldi	r24, 0x21	; 33
 348:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 34c:	08 95       	ret

0000034e <BUZZER_off>:
}
void BUZZER_off()
{
	digitalWrite(BUZZER_PIN,LOW);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e2       	ldi	r24, 0x21	; 33
 352:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 356:	08 95       	ret

00000358 <flame_sensor_intialize>:
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	8e e0       	ldi	r24, 0x0E	; 14
 35c:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 360:	08 95       	ret

00000362 <get_flame_value>:
 362:	8e e0       	ldi	r24, 0x0E	; 14
 364:	0e 94 87 04 	call	0x90e	; 0x90e <digitalRead>
 368:	08 95       	ret

0000036a <ir_sensor_intialize>:
 */ 
#include "IR_SENSOR_INTERFACE.h"

void ir_sensor_intialize()
{
	pinMode(IR_OUTPUT,INPUT);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	8f e0       	ldi	r24, 0x0F	; 15
 36e:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
	pinMode(IR_OUTPUT_1,INPUT);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 37a:	08 95       	ret

0000037c <get_ir_value>:
}
uint8 get_ir_value(uint8 IR)
{
	uint8 ret_value = 0;
	ret_value = digitalRead(IR);
 37c:	0e 94 87 04 	call	0x90e	; 0x90e <digitalRead>
	return(ret_value);
 380:	08 95       	ret

00000382 <lcd_8bit_send_enable_signal>:
		{
			case line_1 :
			LCD_SEND_COMMAND_4BIT(0x80 + col);
			break;
			case line_2 :
			LCD_SEND_COMMAND_4BIT(0xc0 + col);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 38a:	83 ec       	ldi	r24, 0xC3	; 195
 38c:	99 e0       	ldi	r25, 0x09	; 9
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_8bit_send_enable_signal+0xc>
 392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_8bit_send_enable_signal+0x12>
 394:	00 00       	nop
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	8d e0       	ldi	r24, 0x0D	; 13
 39a:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 39e:	83 ec       	ldi	r24, 0xC3	; 195
 3a0:	99 e0       	ldi	r25, 0x09	; 9
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_8bit_send_enable_signal+0x20>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_8bit_send_enable_signal+0x26>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <lcd_4bit_send_enable_signal>:
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	8d e0       	ldi	r24, 0x0D	; 13
 3b0:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 3b4:	83 ec       	ldi	r24, 0xC3	; 195
 3b6:	99 e0       	ldi	r25, 0x09	; 9
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_4bit_send_enable_signal+0xc>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <lcd_4bit_send_enable_signal+0x12>
 3be:	00 00       	nop
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	8d e0       	ldi	r24, 0x0D	; 13
 3c4:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 3c8:	83 ec       	ldi	r24, 0xC3	; 195
 3ca:	99 e0       	ldi	r25, 0x09	; 9
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_4bit_send_enable_signal+0x20>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_4bit_send_enable_signal+0x26>
 3d2:	00 00       	nop
 3d4:	08 95       	ret

000003d6 <LCD_SEND_COMMAND_8BIT>:
 3d6:	cf 93       	push	r28
 3d8:	c8 2f       	mov	r28, r24
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 3e2:	cb bb       	out	0x1b, r28	; 27
 3e4:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_8bit_send_enable_signal>
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <LCD_init_8bit>:
 3ec:	87 e8       	ldi	r24, 0x87	; 135
 3ee:	93 e1       	ldi	r25, 0x13	; 19
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_init_8bit+0x4>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_init_8bit+0xa>
 3f6:	00 00       	nop
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	8a bb       	out	0x1a, r24	; 26
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	8c e0       	ldi	r24, 0x0C	; 12
 400:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 40c:	88 e3       	ldi	r24, 0x38	; 56
 40e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 412:	8c e0       	ldi	r24, 0x0C	; 12
 414:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 418:	89 ef       	ldi	r24, 0xF9	; 249
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 42a:	89 ef       	ldi	r24, 0xF9	; 249
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 43c:	87 e8       	ldi	r24, 0x87	; 135
 43e:	93 e1       	ldi	r25, 0x13	; 19
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	08 95       	ret

0000044a <LCD_SEND_DATA>:
 44a:	cf 93       	push	r28
 44c:	c8 2f       	mov	r28, r24
 44e:	66 23       	and	r22, r22
 450:	19 f0       	breq	.+6      	; 0x458 <LCD_SEND_DATA+0xe>
 452:	61 30       	cpi	r22, 0x01	; 1
 454:	49 f0       	breq	.+18     	; 0x468 <__stack+0x9>
 456:	18 c0       	rjmp	.+48     	; 0x488 <__stack+0x29>
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	8c e0       	ldi	r24, 0x0C	; 12
 45c:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 460:	cb bb       	out	0x1b, r28	; 27
 462:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_8bit_send_enable_signal>
 466:	10 c0       	rjmp	.+32     	; 0x488 <__stack+0x29>
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 470:	8c 2f       	mov	r24, r28
 472:	80 7f       	andi	r24, 0xF0	; 240
 474:	8b bb       	out	0x1b, r24	; 27
 476:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_4bit_send_enable_signal>
 47a:	20 e1       	ldi	r18, 0x10	; 16
 47c:	c2 9f       	mul	r28, r18
 47e:	c0 01       	movw	r24, r0
 480:	11 24       	eor	r1, r1
 482:	8b bb       	out	0x1b, r24	; 27
 484:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_4bit_send_enable_signal>
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <LCD_SEND_DATA_STRING>:
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	16 2f       	mov	r17, r22
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <LCD_SEND_DATA_STRING+0x14>
 498:	21 96       	adiw	r28, 0x01	; 1
 49a:	61 2f       	mov	r22, r17
 49c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SEND_DATA>
 4a0:	88 81       	ld	r24, Y
 4a2:	81 11       	cpse	r24, r1
 4a4:	f9 cf       	rjmp	.-14     	; 0x498 <LCD_SEND_DATA_STRING+0xc>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	08 95       	ret

000004ae <LCD_SEND_DATA_INT>:
 4ae:	80 63       	ori	r24, 0x30	; 48
 4b0:	8b bb       	out	0x1b, r24	; 27
 4b2:	8b b3       	in	r24, 0x1b	; 27
 4b4:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SEND_DATA>
 4b8:	08 95       	ret

000004ba <LCD_CLEAR_8BIT>:
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 4c0:	08 95       	ret

000004c2 <LCD_set_cursor_8bit>:
 4c2:	61 31       	cpi	r22, 0x11	; 17
 4c4:	70 f4       	brcc	.+28     	; 0x4e2 <LCD_set_cursor_8bit+0x20>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <LCD_set_cursor_8bit+0xe>
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	31 f0       	breq	.+12     	; 0x4da <LCD_set_cursor_8bit+0x18>
 4ce:	08 95       	ret
 4d0:	8f e7       	ldi	r24, 0x7F	; 127
 4d2:	86 0f       	add	r24, r22
 4d4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 4d8:	08 95       	ret
 4da:	8f eb       	ldi	r24, 0xBF	; 191
 4dc:	86 0f       	add	r24, r22
 4de:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
 4e2:	08 95       	ret

000004e4 <lcd_8bit_send_char_data_pos>:
		}
	}
	else{}
}
void lcd_8bit_send_char_data_pos(uint8 row,uint8 col,uint8 data)
{
 4e4:	cf 93       	push	r28
 4e6:	c4 2f       	mov	r28, r20
	LCD_set_cursor_8bit(row ,col);
 4e8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_set_cursor_8bit>
	LCD_SEND_DATA(data,MODE_8BIT);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	8c 2f       	mov	r24, r28
 4f0:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SEND_DATA>
}
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <lcd_8bit_send_custom_char>:
void lcd_8bit_send_custom_char(uint8 row,uint8 col,
const uint8 _char[],uint8 mem_pos){
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	f8 2e       	mov	r15, r24
 506:	e6 2e       	mov	r14, r22
 508:	8a 01       	movw	r16, r20
 50a:	d2 2f       	mov	r29, r18
	uint8 lcd_counter = 0;
	
	
		LCD_SEND_COMMAND_8BIT((_LCD_CGRAM_START+(mem_pos*8)));
 50c:	82 2f       	mov	r24, r18
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 96       	adiw	r24, 0x08	; 8
 512:	88 0f       	add	r24, r24
 514:	88 0f       	add	r24, r24
 516:	88 0f       	add	r24, r24
 518:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SEND_COMMAND_8BIT>
		for(lcd_counter = 0; lcd_counter < 8;lcd_counter++)
 51c:	c0 e0       	ldi	r28, 0x00	; 0
 51e:	08 c0       	rjmp	.+16     	; 0x530 <lcd_8bit_send_custom_char+0x38>
		{
			LCD_SEND_DATA(_char[lcd_counter],MODE_8BIT);
 520:	f8 01       	movw	r30, r16
 522:	ec 0f       	add	r30, r28
 524:	f1 1d       	adc	r31, r1
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SEND_DATA>
const uint8 _char[],uint8 mem_pos){
	uint8 lcd_counter = 0;
	
	
		LCD_SEND_COMMAND_8BIT((_LCD_CGRAM_START+(mem_pos*8)));
		for(lcd_counter = 0; lcd_counter < 8;lcd_counter++)
 52e:	cf 5f       	subi	r28, 0xFF	; 255
 530:	c8 30       	cpi	r28, 0x08	; 8
 532:	b0 f3       	brcs	.-20     	; 0x520 <lcd_8bit_send_custom_char+0x28>
		{
			LCD_SEND_DATA(_char[lcd_counter],MODE_8BIT);
		}
		lcd_8bit_send_char_data_pos(row,col,mem_pos);
 534:	4d 2f       	mov	r20, r29
 536:	6e 2d       	mov	r22, r14
 538:	8f 2d       	mov	r24, r15
 53a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_8bit_send_char_data_pos>
	
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	08 95       	ret

0000054c <angleToTime>:
#include "../../LIB/delay_imp.h"

//angle 0 --> 180
//return micro
float angleToTime(uint8 angle){ 
	return 1000.0*(angle/180.0 + 1.0);
 54c:	68 2f       	mov	r22, r24
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatsisf>
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	44 e3       	ldi	r20, 0x34	; 52
 55e:	53 e4       	ldi	r21, 0x43	; 67
 560:	0e 94 31 05 	call	0xa62	; 0xa62 <__divsf3>
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	40 e8       	ldi	r20, 0x80	; 128
 56a:	5f e3       	ldi	r21, 0x3F	; 63
 56c:	0e 94 c5 04 	call	0x98a	; 0x98a <__addsf3>
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	4a e7       	ldi	r20, 0x7A	; 122
 576:	54 e4       	ldi	r21, 0x44	; 68
 578:	0e 94 36 06 	call	0xc6c	; 0xc6c <__mulsf3>
}
 57c:	08 95       	ret

0000057e <servo_motor_init>:

void servo_motor_init(void)
{
	pinMode(motor_1,OUTPUT);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	8a e0       	ldi	r24, 0x0A	; 10
 582:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
	pinMode(motor_2,OUTPUT);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	8b e0       	ldi	r24, 0x0B	; 11
 58a:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 58e:	08 95       	ret

00000590 <servo_motor_degree>:
}

void servo_motor_degree(uint8 motor_pin,uint8 mode)
{
 590:	cf 92       	push	r12
 592:	df 92       	push	r13
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	cf 93       	push	r28
 59a:	c8 2f       	mov	r28, r24
	switch(mode)
 59c:	66 23       	and	r22, r22
 59e:	d1 f0       	breq	.+52     	; 0x5d4 <servo_motor_degree+0x44>
 5a0:	61 30       	cpi	r22, 0x01	; 1
 5a2:	81 f5       	brne	.+96     	; 0x604 <servo_motor_degree+0x74>
	{
		case ON_SERVO_MOTOR:
		digitalWrite(motor_pin,HIGH);
 5a4:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
		delay_Imp(angleToTime(250));
 5a8:	8a ef       	ldi	r24, 0xFA	; 250
 5aa:	0e 94 a6 02 	call	0x54c	; 0x54c <angleToTime>
 5ae:	6b 01       	movw	r12, r22
 5b0:	7c 01       	movw	r14, r24
 5b2:	0e 94 15 03 	call	0x62a	; 0x62a <delay_Imp>
		digitalWrite(motor_pin,LOW);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	8c 2f       	mov	r24, r28
 5ba:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
		delay_Imp(50*1000 - angleToTime(250));	
 5be:	a7 01       	movw	r20, r14
 5c0:	96 01       	movw	r18, r12
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 ec       	ldi	r23, 0xC0	; 192
 5c6:	82 e7       	ldi	r24, 0x72	; 114
 5c8:	96 ec       	ldi	r25, 0xC6	; 198
 5ca:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 5ce:	0e 94 15 03 	call	0x62a	; 0x62a <delay_Imp>
		break;
 5d2:	18 c0       	rjmp	.+48     	; 0x604 <servo_motor_degree+0x74>
		
		case OFF_SERVO_MOTOR:
		digitalWrite(motor_pin,HIGH);
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
		delay_Imp(angleToTime(0));
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 a6 02 	call	0x54c	; 0x54c <angleToTime>
 5e0:	6b 01       	movw	r12, r22
 5e2:	7c 01       	movw	r14, r24
 5e4:	0e 94 15 03 	call	0x62a	; 0x62a <delay_Imp>
		//_delay_ms(1);
		digitalWrite(motor_pin,LOW);
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	8c 2f       	mov	r24, r28
 5ec:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
		//_delay_ms(49);
		delay_Imp(50*1000 - angleToTime(0));
 5f0:	a7 01       	movw	r20, r14
 5f2:	96 01       	movw	r18, r12
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	70 ec       	ldi	r23, 0xC0	; 192
 5f8:	82 e7       	ldi	r24, 0x72	; 114
 5fa:	96 ec       	ldi	r25, 0xC6	; 198
 5fc:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 600:	0e 94 15 03 	call	0x62a	; 0x62a <delay_Imp>
		break;
		
	}
	
	
 604:	cf 91       	pop	r28
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	08 95       	ret

00000610 <Ultra_Sonic_Init>:
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	84 e1       	ldi	r24, 0x14	; 20
 614:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	85 e1       	ldi	r24, 0x15	; 21
 61c:	0e 94 87 03 	call	0x70e	; 0x70e <pinMode>
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	85 e1       	ldi	r24, 0x15	; 21
 624:	0e 94 07 04 	call	0x80e	; 0x80e <digitalWrite>
 628:	08 95       	ret

0000062a <delay_Imp>:
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	6b 01       	movw	r12, r22
 634:	7c 01       	movw	r14, r24
 636:	10 c0       	rjmp	.+32     	; 0x658 <delay_Imp+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	8f ec       	ldi	r24, 0xCF	; 207
 63a:	97 e0       	ldi	r25, 0x07	; 7
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <delay_Imp+0x12>
 640:	00 c0       	rjmp	.+0      	; 0x642 <delay_Imp+0x18>
 642:	00 00       	nop
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	4a e7       	ldi	r20, 0x7A	; 122
 64a:	54 e4       	ldi	r21, 0x44	; 68
 64c:	c7 01       	movw	r24, r14
 64e:	b6 01       	movw	r22, r12
 650:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 654:	6b 01       	movw	r12, r22
 656:	7c 01       	movw	r14, r24
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	4a e7       	ldi	r20, 0x7A	; 122
 65e:	54 e4       	ldi	r21, 0x44	; 68
 660:	c7 01       	movw	r24, r14
 662:	b6 01       	movw	r22, r12
 664:	0e 94 31 06 	call	0xc62	; 0xc62 <__gesf2>
 668:	88 23       	and	r24, r24
 66a:	34 f7       	brge	.-52     	; 0x638 <delay_Imp+0xe>
 66c:	10 c0       	rjmp	.+32     	; 0x68e <delay_Imp+0x64>
 66e:	87 ec       	ldi	r24, 0xC7	; 199
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <delay_Imp+0x48>
 676:	00 c0       	rjmp	.+0      	; 0x678 <delay_Imp+0x4e>
 678:	00 00       	nop
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	48 ec       	ldi	r20, 0xC8	; 200
 680:	52 e4       	ldi	r21, 0x42	; 66
 682:	c7 01       	movw	r24, r14
 684:	b6 01       	movw	r22, r12
 686:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 68a:	6b 01       	movw	r12, r22
 68c:	7c 01       	movw	r14, r24
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	48 ec       	ldi	r20, 0xC8	; 200
 694:	52 e4       	ldi	r21, 0x42	; 66
 696:	c7 01       	movw	r24, r14
 698:	b6 01       	movw	r22, r12
 69a:	0e 94 31 06 	call	0xc62	; 0xc62 <__gesf2>
 69e:	88 23       	and	r24, r24
 6a0:	34 f7       	brge	.-52     	; 0x66e <delay_Imp+0x44>
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <delay_Imp+0x96>
 6a4:	9a e1       	ldi	r25, 0x1A	; 26
 6a6:	9a 95       	dec	r25
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <delay_Imp+0x7c>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <delay_Imp+0x82>
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	40 e2       	ldi	r20, 0x20	; 32
 6b2:	51 e4       	ldi	r21, 0x41	; 65
 6b4:	c7 01       	movw	r24, r14
 6b6:	b6 01       	movw	r22, r12
 6b8:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 6bc:	6b 01       	movw	r12, r22
 6be:	7c 01       	movw	r14, r24
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	40 e2       	ldi	r20, 0x20	; 32
 6c6:	51 e4       	ldi	r21, 0x41	; 65
 6c8:	c7 01       	movw	r24, r14
 6ca:	b6 01       	movw	r22, r12
 6cc:	0e 94 31 06 	call	0xc62	; 0xc62 <__gesf2>
 6d0:	88 23       	and	r24, r24
 6d2:	44 f7       	brge	.-48     	; 0x6a4 <delay_Imp+0x7a>
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <delay_Imp+0xc8>
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	8a 95       	dec	r24
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <delay_Imp+0xae>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <delay_Imp+0xb4>
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e8       	ldi	r20, 0x80	; 128
 6e4:	5f e3       	ldi	r21, 0x3F	; 63
 6e6:	c7 01       	movw	r24, r14
 6e8:	b6 01       	movw	r22, r12
 6ea:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
 6ee:	6b 01       	movw	r12, r22
 6f0:	7c 01       	movw	r14, r24
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	a9 01       	movw	r20, r18
 6f8:	c7 01       	movw	r24, r14
 6fa:	b6 01       	movw	r22, r12
 6fc:	0e 94 31 06 	call	0xc62	; 0xc62 <__gesf2>
 700:	18 16       	cp	r1, r24
 702:	4c f3       	brlt	.-46     	; 0x6d6 <delay_Imp+0xac>
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	08 95       	ret

0000070e <pinMode>:
 70e:	9d ec       	ldi	r25, 0xCD	; 205
 710:	89 9f       	mul	r24, r25
 712:	91 2d       	mov	r25, r1
 714:	11 24       	eor	r1, r1
 716:	96 95       	lsr	r25
 718:	96 95       	lsr	r25
 71a:	96 95       	lsr	r25
 71c:	39 2f       	mov	r19, r25
 71e:	33 0f       	add	r19, r19
 720:	23 2f       	mov	r18, r19
 722:	22 0f       	add	r18, r18
 724:	22 0f       	add	r18, r18
 726:	23 0f       	add	r18, r19
 728:	82 1b       	sub	r24, r18
 72a:	28 2f       	mov	r18, r24
 72c:	66 23       	and	r22, r22
 72e:	b9 f1       	breq	.+110    	; 0x79e <pinMode+0x90>
 730:	61 30       	cpi	r22, 0x01	; 1
 732:	09 f0       	breq	.+2      	; 0x736 <pinMode+0x28>
 734:	6b c0       	rjmp	.+214    	; 0x80c <pinMode+0xfe>
 736:	91 30       	cpi	r25, 0x01	; 1
 738:	89 f0       	breq	.+34     	; 0x75c <pinMode+0x4e>
 73a:	28 f0       	brcs	.+10     	; 0x746 <pinMode+0x38>
 73c:	92 30       	cpi	r25, 0x02	; 2
 73e:	c9 f0       	breq	.+50     	; 0x772 <pinMode+0x64>
 740:	93 30       	cpi	r25, 0x03	; 3
 742:	11 f1       	breq	.+68     	; 0x788 <pinMode+0x7a>
 744:	08 95       	ret
 746:	3a b3       	in	r19, 0x1a	; 26
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <pinMode+0x44>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	2a 95       	dec	r18
 754:	e2 f7       	brpl	.-8      	; 0x74e <pinMode+0x40>
 756:	83 2b       	or	r24, r19
 758:	8a bb       	out	0x1a, r24	; 26
 75a:	08 95       	ret
 75c:	37 b3       	in	r19, 0x17	; 23
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <pinMode+0x5a>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	2a 95       	dec	r18
 76a:	e2 f7       	brpl	.-8      	; 0x764 <pinMode+0x56>
 76c:	83 2b       	or	r24, r19
 76e:	87 bb       	out	0x17, r24	; 23
 770:	08 95       	ret
 772:	34 b3       	in	r19, 0x14	; 20
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <pinMode+0x70>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	2a 95       	dec	r18
 780:	e2 f7       	brpl	.-8      	; 0x77a <pinMode+0x6c>
 782:	83 2b       	or	r24, r19
 784:	84 bb       	out	0x14, r24	; 20
 786:	08 95       	ret
 788:	31 b3       	in	r19, 0x11	; 17
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <pinMode+0x86>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	2a 95       	dec	r18
 796:	e2 f7       	brpl	.-8      	; 0x790 <pinMode+0x82>
 798:	83 2b       	or	r24, r19
 79a:	81 bb       	out	0x11, r24	; 17
 79c:	08 95       	ret
 79e:	91 30       	cpi	r25, 0x01	; 1
 7a0:	91 f0       	breq	.+36     	; 0x7c6 <pinMode+0xb8>
 7a2:	28 f0       	brcs	.+10     	; 0x7ae <pinMode+0xa0>
 7a4:	92 30       	cpi	r25, 0x02	; 2
 7a6:	d9 f0       	breq	.+54     	; 0x7de <pinMode+0xd0>
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	29 f1       	breq	.+74     	; 0x7f6 <pinMode+0xe8>
 7ac:	08 95       	ret
 7ae:	3a b3       	in	r19, 0x1a	; 26
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <pinMode+0xac>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	2a 95       	dec	r18
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <pinMode+0xa8>
 7be:	80 95       	com	r24
 7c0:	83 23       	and	r24, r19
 7c2:	8a bb       	out	0x1a, r24	; 26
 7c4:	08 95       	ret
 7c6:	37 b3       	in	r19, 0x17	; 23
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <pinMode+0xc4>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	2a 95       	dec	r18
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <pinMode+0xc0>
 7d6:	80 95       	com	r24
 7d8:	83 23       	and	r24, r19
 7da:	87 bb       	out	0x17, r24	; 23
 7dc:	08 95       	ret
 7de:	34 b3       	in	r19, 0x14	; 20
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <pinMode+0xdc>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	2a 95       	dec	r18
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <pinMode+0xd8>
 7ee:	80 95       	com	r24
 7f0:	83 23       	and	r24, r19
 7f2:	84 bb       	out	0x14, r24	; 20
 7f4:	08 95       	ret
 7f6:	31 b3       	in	r19, 0x11	; 17
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <pinMode+0xf4>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <pinMode+0xf0>
 806:	80 95       	com	r24
 808:	83 23       	and	r24, r19
 80a:	81 bb       	out	0x11, r24	; 17
 80c:	08 95       	ret

0000080e <digitalWrite>:
 80e:	9d ec       	ldi	r25, 0xCD	; 205
 810:	89 9f       	mul	r24, r25
 812:	91 2d       	mov	r25, r1
 814:	11 24       	eor	r1, r1
 816:	96 95       	lsr	r25
 818:	96 95       	lsr	r25
 81a:	96 95       	lsr	r25
 81c:	39 2f       	mov	r19, r25
 81e:	33 0f       	add	r19, r19
 820:	23 2f       	mov	r18, r19
 822:	22 0f       	add	r18, r18
 824:	22 0f       	add	r18, r18
 826:	23 0f       	add	r18, r19
 828:	82 1b       	sub	r24, r18
 82a:	28 2f       	mov	r18, r24
 82c:	66 23       	and	r22, r22
 82e:	b9 f1       	breq	.+110    	; 0x89e <digitalWrite+0x90>
 830:	61 30       	cpi	r22, 0x01	; 1
 832:	09 f0       	breq	.+2      	; 0x836 <digitalWrite+0x28>
 834:	6b c0       	rjmp	.+214    	; 0x90c <digitalWrite+0xfe>
 836:	91 30       	cpi	r25, 0x01	; 1
 838:	89 f0       	breq	.+34     	; 0x85c <digitalWrite+0x4e>
 83a:	28 f0       	brcs	.+10     	; 0x846 <digitalWrite+0x38>
 83c:	92 30       	cpi	r25, 0x02	; 2
 83e:	c9 f0       	breq	.+50     	; 0x872 <digitalWrite+0x64>
 840:	93 30       	cpi	r25, 0x03	; 3
 842:	11 f1       	breq	.+68     	; 0x888 <digitalWrite+0x7a>
 844:	08 95       	ret
 846:	3b b3       	in	r19, 0x1b	; 27
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <digitalWrite+0x44>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	2a 95       	dec	r18
 854:	e2 f7       	brpl	.-8      	; 0x84e <digitalWrite+0x40>
 856:	83 2b       	or	r24, r19
 858:	8b bb       	out	0x1b, r24	; 27
 85a:	08 95       	ret
 85c:	38 b3       	in	r19, 0x18	; 24
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <digitalWrite+0x5a>
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	2a 95       	dec	r18
 86a:	e2 f7       	brpl	.-8      	; 0x864 <digitalWrite+0x56>
 86c:	83 2b       	or	r24, r19
 86e:	88 bb       	out	0x18, r24	; 24
 870:	08 95       	ret
 872:	35 b3       	in	r19, 0x15	; 21
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <digitalWrite+0x70>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	2a 95       	dec	r18
 880:	e2 f7       	brpl	.-8      	; 0x87a <digitalWrite+0x6c>
 882:	83 2b       	or	r24, r19
 884:	85 bb       	out	0x15, r24	; 21
 886:	08 95       	ret
 888:	32 b3       	in	r19, 0x12	; 18
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <digitalWrite+0x86>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	2a 95       	dec	r18
 896:	e2 f7       	brpl	.-8      	; 0x890 <digitalWrite+0x82>
 898:	83 2b       	or	r24, r19
 89a:	82 bb       	out	0x12, r24	; 18
 89c:	08 95       	ret
 89e:	91 30       	cpi	r25, 0x01	; 1
 8a0:	91 f0       	breq	.+36     	; 0x8c6 <digitalWrite+0xb8>
 8a2:	28 f0       	brcs	.+10     	; 0x8ae <digitalWrite+0xa0>
 8a4:	92 30       	cpi	r25, 0x02	; 2
 8a6:	d9 f0       	breq	.+54     	; 0x8de <digitalWrite+0xd0>
 8a8:	93 30       	cpi	r25, 0x03	; 3
 8aa:	29 f1       	breq	.+74     	; 0x8f6 <digitalWrite+0xe8>
 8ac:	08 95       	ret
 8ae:	3b b3       	in	r19, 0x1b	; 27
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <digitalWrite+0xac>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	2a 95       	dec	r18
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <digitalWrite+0xa8>
 8be:	80 95       	com	r24
 8c0:	83 23       	and	r24, r19
 8c2:	8b bb       	out	0x1b, r24	; 27
 8c4:	08 95       	ret
 8c6:	38 b3       	in	r19, 0x18	; 24
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <digitalWrite+0xc4>
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	2a 95       	dec	r18
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <digitalWrite+0xc0>
 8d6:	80 95       	com	r24
 8d8:	83 23       	and	r24, r19
 8da:	88 bb       	out	0x18, r24	; 24
 8dc:	08 95       	ret
 8de:	35 b3       	in	r19, 0x15	; 21
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <digitalWrite+0xdc>
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	2a 95       	dec	r18
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <digitalWrite+0xd8>
 8ee:	80 95       	com	r24
 8f0:	83 23       	and	r24, r19
 8f2:	85 bb       	out	0x15, r24	; 21
 8f4:	08 95       	ret
 8f6:	32 b3       	in	r19, 0x12	; 18
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <digitalWrite+0xf4>
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	2a 95       	dec	r18
 904:	e2 f7       	brpl	.-8      	; 0x8fe <digitalWrite+0xf0>
 906:	80 95       	com	r24
 908:	83 23       	and	r24, r19
 90a:	82 bb       	out	0x12, r24	; 18
 90c:	08 95       	ret

0000090e <digitalRead>:
 90e:	9d ec       	ldi	r25, 0xCD	; 205
 910:	89 9f       	mul	r24, r25
 912:	91 2d       	mov	r25, r1
 914:	11 24       	eor	r1, r1
 916:	96 95       	lsr	r25
 918:	96 95       	lsr	r25
 91a:	96 95       	lsr	r25
 91c:	39 2f       	mov	r19, r25
 91e:	33 0f       	add	r19, r19
 920:	23 2f       	mov	r18, r19
 922:	22 0f       	add	r18, r18
 924:	22 0f       	add	r18, r18
 926:	23 0f       	add	r18, r19
 928:	82 1b       	sub	r24, r18
 92a:	28 2f       	mov	r18, r24
 92c:	91 30       	cpi	r25, 0x01	; 1
 92e:	79 f0       	breq	.+30     	; 0x94e <digitalRead+0x40>
 930:	28 f0       	brcs	.+10     	; 0x93c <digitalRead+0x2e>
 932:	92 30       	cpi	r25, 0x02	; 2
 934:	a9 f0       	breq	.+42     	; 0x960 <digitalRead+0x52>
 936:	93 30       	cpi	r25, 0x03	; 3
 938:	e1 f0       	breq	.+56     	; 0x972 <digitalRead+0x64>
 93a:	24 c0       	rjmp	.+72     	; 0x984 <digitalRead+0x76>
 93c:	89 b3       	in	r24, 0x19	; 25
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <digitalRead+0x38>
 942:	95 95       	asr	r25
 944:	87 95       	ror	r24
 946:	2a 95       	dec	r18
 948:	e2 f7       	brpl	.-8      	; 0x942 <digitalRead+0x34>
 94a:	81 70       	andi	r24, 0x01	; 1
 94c:	08 95       	ret
 94e:	86 b3       	in	r24, 0x16	; 22
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <digitalRead+0x4a>
 954:	95 95       	asr	r25
 956:	87 95       	ror	r24
 958:	2a 95       	dec	r18
 95a:	e2 f7       	brpl	.-8      	; 0x954 <digitalRead+0x46>
 95c:	81 70       	andi	r24, 0x01	; 1
 95e:	08 95       	ret
 960:	83 b3       	in	r24, 0x13	; 19
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <digitalRead+0x5c>
 966:	95 95       	asr	r25
 968:	87 95       	ror	r24
 96a:	2a 95       	dec	r18
 96c:	e2 f7       	brpl	.-8      	; 0x966 <digitalRead+0x58>
 96e:	81 70       	andi	r24, 0x01	; 1
 970:	08 95       	ret
 972:	80 b3       	in	r24, 0x10	; 16
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <digitalRead+0x6e>
 978:	95 95       	asr	r25
 97a:	87 95       	ror	r24
 97c:	2a 95       	dec	r18
 97e:	e2 f7       	brpl	.-8      	; 0x978 <digitalRead+0x6a>
 980:	81 70       	andi	r24, 0x01	; 1
 982:	08 95       	ret
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	08 95       	ret

00000988 <__subsf3>:
 988:	50 58       	subi	r21, 0x80	; 128

0000098a <__addsf3>:
 98a:	bb 27       	eor	r27, r27
 98c:	aa 27       	eor	r26, r26
 98e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__addsf3x>
 992:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_round>
 996:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscA>
 99a:	38 f0       	brcs	.+14     	; 0x9aa <__addsf3+0x20>
 99c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_pscB>
 9a0:	20 f0       	brcs	.+8      	; 0x9aa <__addsf3+0x20>
 9a2:	39 f4       	brne	.+14     	; 0x9b2 <__addsf3+0x28>
 9a4:	9f 3f       	cpi	r25, 0xFF	; 255
 9a6:	19 f4       	brne	.+6      	; 0x9ae <__addsf3+0x24>
 9a8:	26 f4       	brtc	.+8      	; 0x9b2 <__addsf3+0x28>
 9aa:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_nan>
 9ae:	0e f4       	brtc	.+2      	; 0x9b2 <__addsf3+0x28>
 9b0:	e0 95       	com	r30
 9b2:	e7 fb       	bst	r30, 7
 9b4:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_inf>

000009b8 <__addsf3x>:
 9b8:	e9 2f       	mov	r30, r25
 9ba:	0e 94 08 06 	call	0xc10	; 0xc10 <__fp_split3>
 9be:	58 f3       	brcs	.-42     	; 0x996 <__addsf3+0xc>
 9c0:	ba 17       	cp	r27, r26
 9c2:	62 07       	cpc	r22, r18
 9c4:	73 07       	cpc	r23, r19
 9c6:	84 07       	cpc	r24, r20
 9c8:	95 07       	cpc	r25, r21
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__addsf3x+0x1c>
 9cc:	79 f4       	brne	.+30     	; 0x9ec <__addsf3x+0x34>
 9ce:	a6 f5       	brtc	.+104    	; 0xa38 <__addsf3x+0x80>
 9d0:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_zero>
 9d4:	0e f4       	brtc	.+2      	; 0x9d8 <__addsf3x+0x20>
 9d6:	e0 95       	com	r30
 9d8:	0b 2e       	mov	r0, r27
 9da:	ba 2f       	mov	r27, r26
 9dc:	a0 2d       	mov	r26, r0
 9de:	0b 01       	movw	r0, r22
 9e0:	b9 01       	movw	r22, r18
 9e2:	90 01       	movw	r18, r0
 9e4:	0c 01       	movw	r0, r24
 9e6:	ca 01       	movw	r24, r20
 9e8:	a0 01       	movw	r20, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	ff 27       	eor	r31, r31
 9ee:	59 1b       	sub	r21, r25
 9f0:	99 f0       	breq	.+38     	; 0xa18 <__addsf3x+0x60>
 9f2:	59 3f       	cpi	r21, 0xF9	; 249
 9f4:	50 f4       	brcc	.+20     	; 0xa0a <__addsf3x+0x52>
 9f6:	50 3e       	cpi	r21, 0xE0	; 224
 9f8:	68 f1       	brcs	.+90     	; 0xa54 <__addsf3x+0x9c>
 9fa:	1a 16       	cp	r1, r26
 9fc:	f0 40       	sbci	r31, 0x00	; 0
 9fe:	a2 2f       	mov	r26, r18
 a00:	23 2f       	mov	r18, r19
 a02:	34 2f       	mov	r19, r20
 a04:	44 27       	eor	r20, r20
 a06:	58 5f       	subi	r21, 0xF8	; 248
 a08:	f3 cf       	rjmp	.-26     	; 0x9f0 <__addsf3x+0x38>
 a0a:	46 95       	lsr	r20
 a0c:	37 95       	ror	r19
 a0e:	27 95       	ror	r18
 a10:	a7 95       	ror	r26
 a12:	f0 40       	sbci	r31, 0x00	; 0
 a14:	53 95       	inc	r21
 a16:	c9 f7       	brne	.-14     	; 0xa0a <__addsf3x+0x52>
 a18:	7e f4       	brtc	.+30     	; 0xa38 <__addsf3x+0x80>
 a1a:	1f 16       	cp	r1, r31
 a1c:	ba 0b       	sbc	r27, r26
 a1e:	62 0b       	sbc	r22, r18
 a20:	73 0b       	sbc	r23, r19
 a22:	84 0b       	sbc	r24, r20
 a24:	ba f0       	brmi	.+46     	; 0xa54 <__addsf3x+0x9c>
 a26:	91 50       	subi	r25, 0x01	; 1
 a28:	a1 f0       	breq	.+40     	; 0xa52 <__addsf3x+0x9a>
 a2a:	ff 0f       	add	r31, r31
 a2c:	bb 1f       	adc	r27, r27
 a2e:	66 1f       	adc	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	c2 f7       	brpl	.-16     	; 0xa26 <__addsf3x+0x6e>
 a36:	0e c0       	rjmp	.+28     	; 0xa54 <__addsf3x+0x9c>
 a38:	ba 0f       	add	r27, r26
 a3a:	62 1f       	adc	r22, r18
 a3c:	73 1f       	adc	r23, r19
 a3e:	84 1f       	adc	r24, r20
 a40:	48 f4       	brcc	.+18     	; 0xa54 <__addsf3x+0x9c>
 a42:	87 95       	ror	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	f7 95       	ror	r31
 a4c:	9e 3f       	cpi	r25, 0xFE	; 254
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__addsf3x+0x9a>
 a50:	b0 cf       	rjmp	.-160    	; 0x9b2 <__addsf3+0x28>
 a52:	93 95       	inc	r25
 a54:	88 0f       	add	r24, r24
 a56:	08 f0       	brcs	.+2      	; 0xa5a <__addsf3x+0xa2>
 a58:	99 27       	eor	r25, r25
 a5a:	ee 0f       	add	r30, r30
 a5c:	97 95       	ror	r25
 a5e:	87 95       	ror	r24
 a60:	08 95       	ret

00000a62 <__divsf3>:
 a62:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divsf3x>
 a66:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_round>
 a6a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_pscB>
 a6e:	58 f0       	brcs	.+22     	; 0xa86 <__divsf3+0x24>
 a70:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscA>
 a74:	40 f0       	brcs	.+16     	; 0xa86 <__divsf3+0x24>
 a76:	29 f4       	brne	.+10     	; 0xa82 <__divsf3+0x20>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	29 f0       	breq	.+10     	; 0xa86 <__divsf3+0x24>
 a7c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_inf>
 a80:	51 11       	cpse	r21, r1
 a82:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_szero>
 a86:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_nan>

00000a8a <__divsf3x>:
 a8a:	0e 94 08 06 	call	0xc10	; 0xc10 <__fp_split3>
 a8e:	68 f3       	brcs	.-38     	; 0xa6a <__divsf3+0x8>

00000a90 <__divsf3_pse>:
 a90:	99 23       	and	r25, r25
 a92:	b1 f3       	breq	.-20     	; 0xa80 <__divsf3+0x1e>
 a94:	55 23       	and	r21, r21
 a96:	91 f3       	breq	.-28     	; 0xa7c <__divsf3+0x1a>
 a98:	95 1b       	sub	r25, r21
 a9a:	55 0b       	sbc	r21, r21
 a9c:	bb 27       	eor	r27, r27
 a9e:	aa 27       	eor	r26, r26
 aa0:	62 17       	cp	r22, r18
 aa2:	73 07       	cpc	r23, r19
 aa4:	84 07       	cpc	r24, r20
 aa6:	38 f0       	brcs	.+14     	; 0xab6 <__divsf3_pse+0x26>
 aa8:	9f 5f       	subi	r25, 0xFF	; 255
 aaa:	5f 4f       	sbci	r21, 0xFF	; 255
 aac:	22 0f       	add	r18, r18
 aae:	33 1f       	adc	r19, r19
 ab0:	44 1f       	adc	r20, r20
 ab2:	aa 1f       	adc	r26, r26
 ab4:	a9 f3       	breq	.-22     	; 0xaa0 <__divsf3_pse+0x10>
 ab6:	35 d0       	rcall	.+106    	; 0xb22 <__divsf3_pse+0x92>
 ab8:	0e 2e       	mov	r0, r30
 aba:	3a f0       	brmi	.+14     	; 0xaca <__divsf3_pse+0x3a>
 abc:	e0 e8       	ldi	r30, 0x80	; 128
 abe:	32 d0       	rcall	.+100    	; 0xb24 <__divsf3_pse+0x94>
 ac0:	91 50       	subi	r25, 0x01	; 1
 ac2:	50 40       	sbci	r21, 0x00	; 0
 ac4:	e6 95       	lsr	r30
 ac6:	00 1c       	adc	r0, r0
 ac8:	ca f7       	brpl	.-14     	; 0xabc <__divsf3_pse+0x2c>
 aca:	2b d0       	rcall	.+86     	; 0xb22 <__divsf3_pse+0x92>
 acc:	fe 2f       	mov	r31, r30
 ace:	29 d0       	rcall	.+82     	; 0xb22 <__divsf3_pse+0x92>
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	bb 1f       	adc	r27, r27
 ad8:	26 17       	cp	r18, r22
 ada:	37 07       	cpc	r19, r23
 adc:	48 07       	cpc	r20, r24
 ade:	ab 07       	cpc	r26, r27
 ae0:	b0 e8       	ldi	r27, 0x80	; 128
 ae2:	09 f0       	breq	.+2      	; 0xae6 <__divsf3_pse+0x56>
 ae4:	bb 0b       	sbc	r27, r27
 ae6:	80 2d       	mov	r24, r0
 ae8:	bf 01       	movw	r22, r30
 aea:	ff 27       	eor	r31, r31
 aec:	93 58       	subi	r25, 0x83	; 131
 aee:	5f 4f       	sbci	r21, 0xFF	; 255
 af0:	3a f0       	brmi	.+14     	; 0xb00 <__divsf3_pse+0x70>
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	51 05       	cpc	r21, r1
 af6:	78 f0       	brcs	.+30     	; 0xb16 <__divsf3_pse+0x86>
 af8:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_inf>
 afc:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_szero>
 b00:	5f 3f       	cpi	r21, 0xFF	; 255
 b02:	e4 f3       	brlt	.-8      	; 0xafc <__divsf3_pse+0x6c>
 b04:	98 3e       	cpi	r25, 0xE8	; 232
 b06:	d4 f3       	brlt	.-12     	; 0xafc <__divsf3_pse+0x6c>
 b08:	86 95       	lsr	r24
 b0a:	77 95       	ror	r23
 b0c:	67 95       	ror	r22
 b0e:	b7 95       	ror	r27
 b10:	f7 95       	ror	r31
 b12:	9f 5f       	subi	r25, 0xFF	; 255
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__divsf3_pse+0x78>
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret
 b22:	e1 e0       	ldi	r30, 0x01	; 1
 b24:	66 0f       	add	r22, r22
 b26:	77 1f       	adc	r23, r23
 b28:	88 1f       	adc	r24, r24
 b2a:	bb 1f       	adc	r27, r27
 b2c:	62 17       	cp	r22, r18
 b2e:	73 07       	cpc	r23, r19
 b30:	84 07       	cpc	r24, r20
 b32:	ba 07       	cpc	r27, r26
 b34:	20 f0       	brcs	.+8      	; 0xb3e <__divsf3_pse+0xae>
 b36:	62 1b       	sub	r22, r18
 b38:	73 0b       	sbc	r23, r19
 b3a:	84 0b       	sbc	r24, r20
 b3c:	ba 0b       	sbc	r27, r26
 b3e:	ee 1f       	adc	r30, r30
 b40:	88 f7       	brcc	.-30     	; 0xb24 <__divsf3_pse+0x94>
 b42:	e0 95       	com	r30
 b44:	08 95       	ret

00000b46 <__floatunsisf>:
 b46:	e8 94       	clt
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <__floatsisf+0x12>

00000b4a <__floatsisf>:
 b4a:	97 fb       	bst	r25, 7
 b4c:	3e f4       	brtc	.+14     	; 0xb5c <__floatsisf+0x12>
 b4e:	90 95       	com	r25
 b50:	80 95       	com	r24
 b52:	70 95       	com	r23
 b54:	61 95       	neg	r22
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	99 23       	and	r25, r25
 b5e:	a9 f0       	breq	.+42     	; 0xb8a <__floatsisf+0x40>
 b60:	f9 2f       	mov	r31, r25
 b62:	96 e9       	ldi	r25, 0x96	; 150
 b64:	bb 27       	eor	r27, r27
 b66:	93 95       	inc	r25
 b68:	f6 95       	lsr	r31
 b6a:	87 95       	ror	r24
 b6c:	77 95       	ror	r23
 b6e:	67 95       	ror	r22
 b70:	b7 95       	ror	r27
 b72:	f1 11       	cpse	r31, r1
 b74:	f8 cf       	rjmp	.-16     	; 0xb66 <__floatsisf+0x1c>
 b76:	fa f4       	brpl	.+62     	; 0xbb6 <__floatsisf+0x6c>
 b78:	bb 0f       	add	r27, r27
 b7a:	11 f4       	brne	.+4      	; 0xb80 <__floatsisf+0x36>
 b7c:	60 ff       	sbrs	r22, 0
 b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <__floatsisf+0x6c>
 b80:	6f 5f       	subi	r22, 0xFF	; 255
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	16 c0       	rjmp	.+44     	; 0xbb6 <__floatsisf+0x6c>
 b8a:	88 23       	and	r24, r24
 b8c:	11 f0       	breq	.+4      	; 0xb92 <__floatsisf+0x48>
 b8e:	96 e9       	ldi	r25, 0x96	; 150
 b90:	11 c0       	rjmp	.+34     	; 0xbb4 <__floatsisf+0x6a>
 b92:	77 23       	and	r23, r23
 b94:	21 f0       	breq	.+8      	; 0xb9e <__floatsisf+0x54>
 b96:	9e e8       	ldi	r25, 0x8E	; 142
 b98:	87 2f       	mov	r24, r23
 b9a:	76 2f       	mov	r23, r22
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__floatsisf+0x5e>
 b9e:	66 23       	and	r22, r22
 ba0:	71 f0       	breq	.+28     	; 0xbbe <__floatsisf+0x74>
 ba2:	96 e8       	ldi	r25, 0x86	; 134
 ba4:	86 2f       	mov	r24, r22
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	60 e0       	ldi	r22, 0x00	; 0
 baa:	2a f0       	brmi	.+10     	; 0xbb6 <__floatsisf+0x6c>
 bac:	9a 95       	dec	r25
 bae:	66 0f       	add	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	88 1f       	adc	r24, r24
 bb4:	da f7       	brpl	.-10     	; 0xbac <__floatsisf+0x62>
 bb6:	88 0f       	add	r24, r24
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret

00000bc0 <__fp_inf>:
 bc0:	97 f9       	bld	r25, 7
 bc2:	9f 67       	ori	r25, 0x7F	; 127
 bc4:	80 e8       	ldi	r24, 0x80	; 128
 bc6:	70 e0       	ldi	r23, 0x00	; 0
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	08 95       	ret

00000bcc <__fp_nan>:
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	80 ec       	ldi	r24, 0xC0	; 192
 bd0:	08 95       	ret

00000bd2 <__fp_pscA>:
 bd2:	00 24       	eor	r0, r0
 bd4:	0a 94       	dec	r0
 bd6:	16 16       	cp	r1, r22
 bd8:	17 06       	cpc	r1, r23
 bda:	18 06       	cpc	r1, r24
 bdc:	09 06       	cpc	r0, r25
 bde:	08 95       	ret

00000be0 <__fp_pscB>:
 be0:	00 24       	eor	r0, r0
 be2:	0a 94       	dec	r0
 be4:	12 16       	cp	r1, r18
 be6:	13 06       	cpc	r1, r19
 be8:	14 06       	cpc	r1, r20
 bea:	05 06       	cpc	r0, r21
 bec:	08 95       	ret

00000bee <__fp_round>:
 bee:	09 2e       	mov	r0, r25
 bf0:	03 94       	inc	r0
 bf2:	00 0c       	add	r0, r0
 bf4:	11 f4       	brne	.+4      	; 0xbfa <__fp_round+0xc>
 bf6:	88 23       	and	r24, r24
 bf8:	52 f0       	brmi	.+20     	; 0xc0e <__fp_round+0x20>
 bfa:	bb 0f       	add	r27, r27
 bfc:	40 f4       	brcc	.+16     	; 0xc0e <__fp_round+0x20>
 bfe:	bf 2b       	or	r27, r31
 c00:	11 f4       	brne	.+4      	; 0xc06 <__fp_round+0x18>
 c02:	60 ff       	sbrs	r22, 0
 c04:	04 c0       	rjmp	.+8      	; 0xc0e <__fp_round+0x20>
 c06:	6f 5f       	subi	r22, 0xFF	; 255
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	08 95       	ret

00000c10 <__fp_split3>:
 c10:	57 fd       	sbrc	r21, 7
 c12:	90 58       	subi	r25, 0x80	; 128
 c14:	44 0f       	add	r20, r20
 c16:	55 1f       	adc	r21, r21
 c18:	59 f0       	breq	.+22     	; 0xc30 <__fp_splitA+0x10>
 c1a:	5f 3f       	cpi	r21, 0xFF	; 255
 c1c:	71 f0       	breq	.+28     	; 0xc3a <__fp_splitA+0x1a>
 c1e:	47 95       	ror	r20

00000c20 <__fp_splitA>:
 c20:	88 0f       	add	r24, r24
 c22:	97 fb       	bst	r25, 7
 c24:	99 1f       	adc	r25, r25
 c26:	61 f0       	breq	.+24     	; 0xc40 <__fp_splitA+0x20>
 c28:	9f 3f       	cpi	r25, 0xFF	; 255
 c2a:	79 f0       	breq	.+30     	; 0xc4a <__fp_splitA+0x2a>
 c2c:	87 95       	ror	r24
 c2e:	08 95       	ret
 c30:	12 16       	cp	r1, r18
 c32:	13 06       	cpc	r1, r19
 c34:	14 06       	cpc	r1, r20
 c36:	55 1f       	adc	r21, r21
 c38:	f2 cf       	rjmp	.-28     	; 0xc1e <__fp_split3+0xe>
 c3a:	46 95       	lsr	r20
 c3c:	f1 df       	rcall	.-30     	; 0xc20 <__fp_splitA>
 c3e:	08 c0       	rjmp	.+16     	; 0xc50 <__fp_splitA+0x30>
 c40:	16 16       	cp	r1, r22
 c42:	17 06       	cpc	r1, r23
 c44:	18 06       	cpc	r1, r24
 c46:	99 1f       	adc	r25, r25
 c48:	f1 cf       	rjmp	.-30     	; 0xc2c <__fp_splitA+0xc>
 c4a:	86 95       	lsr	r24
 c4c:	71 05       	cpc	r23, r1
 c4e:	61 05       	cpc	r22, r1
 c50:	08 94       	sec
 c52:	08 95       	ret

00000c54 <__fp_zero>:
 c54:	e8 94       	clt

00000c56 <__fp_szero>:
 c56:	bb 27       	eor	r27, r27
 c58:	66 27       	eor	r22, r22
 c5a:	77 27       	eor	r23, r23
 c5c:	cb 01       	movw	r24, r22
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__gesf2>:
 c62:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_cmp>
 c66:	08 f4       	brcc	.+2      	; 0xc6a <__gesf2+0x8>
 c68:	8f ef       	ldi	r24, 0xFF	; 255
 c6a:	08 95       	ret

00000c6c <__mulsf3>:
 c6c:	0e 94 49 06 	call	0xc92	; 0xc92 <__mulsf3x>
 c70:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_round>
 c74:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscA>
 c78:	38 f0       	brcs	.+14     	; 0xc88 <__mulsf3+0x1c>
 c7a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_pscB>
 c7e:	20 f0       	brcs	.+8      	; 0xc88 <__mulsf3+0x1c>
 c80:	95 23       	and	r25, r21
 c82:	11 f0       	breq	.+4      	; 0xc88 <__mulsf3+0x1c>
 c84:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_inf>
 c88:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_nan>
 c8c:	11 24       	eor	r1, r1
 c8e:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_szero>

00000c92 <__mulsf3x>:
 c92:	0e 94 08 06 	call	0xc10	; 0xc10 <__fp_split3>
 c96:	70 f3       	brcs	.-36     	; 0xc74 <__mulsf3+0x8>

00000c98 <__mulsf3_pse>:
 c98:	95 9f       	mul	r25, r21
 c9a:	c1 f3       	breq	.-16     	; 0xc8c <__mulsf3+0x20>
 c9c:	95 0f       	add	r25, r21
 c9e:	50 e0       	ldi	r21, 0x00	; 0
 ca0:	55 1f       	adc	r21, r21
 ca2:	62 9f       	mul	r22, r18
 ca4:	f0 01       	movw	r30, r0
 ca6:	72 9f       	mul	r23, r18
 ca8:	bb 27       	eor	r27, r27
 caa:	f0 0d       	add	r31, r0
 cac:	b1 1d       	adc	r27, r1
 cae:	63 9f       	mul	r22, r19
 cb0:	aa 27       	eor	r26, r26
 cb2:	f0 0d       	add	r31, r0
 cb4:	b1 1d       	adc	r27, r1
 cb6:	aa 1f       	adc	r26, r26
 cb8:	64 9f       	mul	r22, r20
 cba:	66 27       	eor	r22, r22
 cbc:	b0 0d       	add	r27, r0
 cbe:	a1 1d       	adc	r26, r1
 cc0:	66 1f       	adc	r22, r22
 cc2:	82 9f       	mul	r24, r18
 cc4:	22 27       	eor	r18, r18
 cc6:	b0 0d       	add	r27, r0
 cc8:	a1 1d       	adc	r26, r1
 cca:	62 1f       	adc	r22, r18
 ccc:	73 9f       	mul	r23, r19
 cce:	b0 0d       	add	r27, r0
 cd0:	a1 1d       	adc	r26, r1
 cd2:	62 1f       	adc	r22, r18
 cd4:	83 9f       	mul	r24, r19
 cd6:	a0 0d       	add	r26, r0
 cd8:	61 1d       	adc	r22, r1
 cda:	22 1f       	adc	r18, r18
 cdc:	74 9f       	mul	r23, r20
 cde:	33 27       	eor	r19, r19
 ce0:	a0 0d       	add	r26, r0
 ce2:	61 1d       	adc	r22, r1
 ce4:	23 1f       	adc	r18, r19
 ce6:	84 9f       	mul	r24, r20
 ce8:	60 0d       	add	r22, r0
 cea:	21 1d       	adc	r18, r1
 cec:	82 2f       	mov	r24, r18
 cee:	76 2f       	mov	r23, r22
 cf0:	6a 2f       	mov	r22, r26
 cf2:	11 24       	eor	r1, r1
 cf4:	9f 57       	subi	r25, 0x7F	; 127
 cf6:	50 40       	sbci	r21, 0x00	; 0
 cf8:	9a f0       	brmi	.+38     	; 0xd20 <__mulsf3_pse+0x88>
 cfa:	f1 f0       	breq	.+60     	; 0xd38 <__mulsf3_pse+0xa0>
 cfc:	88 23       	and	r24, r24
 cfe:	4a f0       	brmi	.+18     	; 0xd12 <__mulsf3_pse+0x7a>
 d00:	ee 0f       	add	r30, r30
 d02:	ff 1f       	adc	r31, r31
 d04:	bb 1f       	adc	r27, r27
 d06:	66 1f       	adc	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	91 50       	subi	r25, 0x01	; 1
 d0e:	50 40       	sbci	r21, 0x00	; 0
 d10:	a9 f7       	brne	.-22     	; 0xcfc <__mulsf3_pse+0x64>
 d12:	9e 3f       	cpi	r25, 0xFE	; 254
 d14:	51 05       	cpc	r21, r1
 d16:	80 f0       	brcs	.+32     	; 0xd38 <__mulsf3_pse+0xa0>
 d18:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_inf>
 d1c:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_szero>
 d20:	5f 3f       	cpi	r21, 0xFF	; 255
 d22:	e4 f3       	brlt	.-8      	; 0xd1c <__mulsf3_pse+0x84>
 d24:	98 3e       	cpi	r25, 0xE8	; 232
 d26:	d4 f3       	brlt	.-12     	; 0xd1c <__mulsf3_pse+0x84>
 d28:	86 95       	lsr	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	b7 95       	ror	r27
 d30:	f7 95       	ror	r31
 d32:	e7 95       	ror	r30
 d34:	9f 5f       	subi	r25, 0xFF	; 255
 d36:	c1 f7       	brne	.-16     	; 0xd28 <__mulsf3_pse+0x90>
 d38:	fe 2b       	or	r31, r30
 d3a:	88 0f       	add	r24, r24
 d3c:	91 1d       	adc	r25, r1
 d3e:	96 95       	lsr	r25
 d40:	87 95       	ror	r24
 d42:	97 f9       	bld	r25, 7
 d44:	08 95       	ret

00000d46 <__fp_cmp>:
 d46:	99 0f       	add	r25, r25
 d48:	00 08       	sbc	r0, r0
 d4a:	55 0f       	add	r21, r21
 d4c:	aa 0b       	sbc	r26, r26
 d4e:	e0 e8       	ldi	r30, 0x80	; 128
 d50:	fe ef       	ldi	r31, 0xFE	; 254
 d52:	16 16       	cp	r1, r22
 d54:	17 06       	cpc	r1, r23
 d56:	e8 07       	cpc	r30, r24
 d58:	f9 07       	cpc	r31, r25
 d5a:	c0 f0       	brcs	.+48     	; 0xd8c <__fp_cmp+0x46>
 d5c:	12 16       	cp	r1, r18
 d5e:	13 06       	cpc	r1, r19
 d60:	e4 07       	cpc	r30, r20
 d62:	f5 07       	cpc	r31, r21
 d64:	98 f0       	brcs	.+38     	; 0xd8c <__fp_cmp+0x46>
 d66:	62 1b       	sub	r22, r18
 d68:	73 0b       	sbc	r23, r19
 d6a:	84 0b       	sbc	r24, r20
 d6c:	95 0b       	sbc	r25, r21
 d6e:	39 f4       	brne	.+14     	; 0xd7e <__fp_cmp+0x38>
 d70:	0a 26       	eor	r0, r26
 d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_cmp+0x46>
 d74:	23 2b       	or	r18, r19
 d76:	24 2b       	or	r18, r20
 d78:	25 2b       	or	r18, r21
 d7a:	21 f4       	brne	.+8      	; 0xd84 <__fp_cmp+0x3e>
 d7c:	08 95       	ret
 d7e:	0a 26       	eor	r0, r26
 d80:	09 f4       	brne	.+2      	; 0xd84 <__fp_cmp+0x3e>
 d82:	a1 40       	sbci	r26, 0x01	; 1
 d84:	a6 95       	lsr	r26
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	81 1d       	adc	r24, r1
 d8a:	81 1d       	adc	r24, r1
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
